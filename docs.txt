/***********************************user***********************************/
1)signup
url = https://dashboard.go-tex.net/api/user/signup
body:
{
    "name": "",
    "mobile": "",
    "email": "",
    "password": "",
    "address": "",
    "location": "",
    "cr": files   //optional
}
response
{
    "msg": "ok",
    "user": {
        
    }
}
/**********************
2)signin
url = https://dashboard.go-tex.net/api/user/login
body:
{
    "email": "",
    "password": "",
}
response
{
    "msg": "ok",
    "token": " "
}
/**************
3) get user balance
url = https://dashboard.go-tex.net/api/user/get-user-balance
method = get 
response{
    "data": 0
}
/********************
4)marketer-signup
url = https://dashboard.go-tex.net/api/user/marketer-signup
body:
{
    "name": "",
    "mobile": "",
    "email": "",
    "password": "",
    "address": "",
    "location": ""
}
response
{
    "msg": "ok",
    "user": {
        
    }
}
/***********************
5) verfiy account
url = https://dashboard.go-tex.net/api/user/activate-user/{code}/{id}
method = get
response{
    msg: "user verified"
}
/***************
6) resend activate mail (token is required)
url = https://dashboard.go-tex.net/api/user/resend-activate-code
method = get
response{
    "msg": "email send"
}
/***************
7)send-email-update-password
url = https://dashboard.go-tex.net/api/user/send-email-update-password
method = post
body{
  "email": ""
}
/*****************
8) update password
url = https://dashboard.go-tex.net/api/user/send-email-update-password
method = post
body{
  "password": "",
  "code": ""
}
/*******************
9) add new clint (for marketer)
url = https://dashboard.go-tex.net/api/user/add-new-clint
method = post
body{
    name: name,
    email: email,
    mobile: mobile,
    city: city,
    address: address
}
/***********************
10) add-clint-deposit (for marketer)
url = https://dashboard.go-tex.net/api/user/add-clint-deposit
method = post
body{
    deposit: Number,
    clintid: "",
    recipt: file
}
/*********************
11) all-markter-clint (for marketer)
url = https://dashboard.go-tex.net/api/user/all-markter-clint
method = get
/*********************************admin*************************/
1) login
url = https://dashboard.go-tex.net/api/admin/login
body:
{
    "email": "",
    "password": "",
}
response
{
    "msg": "ok",
    "token": " "
}
/************
2)get all users
url = https://dashboard.go-tex.net/api/admin/get-all-users
method = get
/************
3) add deposit
url = https://dashboard.go-tex.net/api/admin/add-deposit-to-user
method = post
body
{
    id: "user id",
    deposit: Number
}
/********
4) proof cr for user
url = https://dashboard.go-tex.net/api/admin/proof-user-cr
method = post
body{
    "email": "" 
}
/*******************
5)un proof cr for user
url = https://dashboard.go-tex.net/api/admin/un-proof-user-cr
method = post
body{
    "email": "" 
}
/*********************************companies***********************/
1)get all (token is not require)
url = https://dashboard.go-tex.net/api/companies/get-all
method = get
/***************
2) get all orders (for admin)
url = https://dashboard.go-tex.net/api/companies/get-all-orders
method = get

3) get all orders with search (admin)
url = https://dashboard.go-tex.net/api/companies/orders/all?page=1&limit=30&company={}&paytype={}&billCode={}&marktercode={}&keyword{}&startDate={}&endDate={}
method = GET

by default (using only -> https://dashboard.go-tex.net/api/companies/orders/all) : get all orders with pagination -> page=1, limit=30

response {
    "result": 30,
    "pagination": {
        "currentPage": 1,
        "limit": 30,
        "numberOfPages": 5
    },
    "data": [
        {
            "_id": "653d0965edca860610df3580",
            "user": {
                "_id": "6511e27aa2b4b5d0877d0be8",
                "name": "soha",
                "password": "$2b$10$MzDRLaXsApCTmBwErLmnj.oghR6WAoakd1IvfnQuEtoZs5v5CPgoG",
                "email": "sohaali710@gmail.com",
                "mobile": "966505694459",
                "address": "123 st.",
                "location": "egypt",
                "emailcode": "9874",
                "verified": true,
                "rolle": "marketer",
                "wallet": 73130,
                "cr": [],
                "iscrproofed": false,
                "__v": 0,
                "daftraid": "1",
                "daftraClientId": "127"
            },
            "company": "jt",
            "ordernumber": 10,
            "data": {
                "code": "1",
                "msg": "success",
                "data": {
                    "txlogisticId": "1695119354339Gotex",
                    "billCode": "JTE000200085796",
                    "subCodes": [],
                    "sortingCode": "BUR-NB004-",
                    "createOrderTime": "2023-10-28 16:15:17",
                    "lastCenterName": "Burayidah DC"
                }
            },
            "paytype": "cc",
            "price": 22,
            "marktercode": "",
            "createdate": "Sat Oct 28 2023 15:15:17 GMT+0200 (Eastern European Standard Time)",
            "status": "pending",
            "inovicedaftra": {
                "result": "successful",
                "code": 202,
                "id": "1233",
                "invoice_number": "101208"
            },
            "__v": 0
        }
    ]
}

4) get all orders with search [admin] ------ New API ------
url = /orders?page=1&limit=30&company={}&paytype={}&billCode={}&marktercode={}&keyword{}
method = GET

by default (using only -> https://dashboard.go-tex.net/api/orders) : get all orders with pagination -> page=1, limit=30

response {
    "result": 30,
    "pagination": {
        "currentPage": 1,
        "limit": 30,
        "numberOfPages": 5
    },
    "data": [
        {
            "_id": "6595635f68e4b8567a8b93ef",
            "company": "smsa",
            "ordernumber": "33",
            "data": {
                "sawb": "290856967721",
                "createDate": "2024-01-03T00:00:00",
                "shipmentParcelsCount": 1,
                "waybills": [
                    {
                        "awb": "290856967721",
                        "awbFile": ""
                        "awbFile": ""
                    }
                ]
            },
            "paytype": "cc",
            "price": 22,
            "marktercode": "231434",
            "billCode": "290856967721",
            "created_at": "2024-01-03T13:38:40.327Z",
            "status": "pending",
            "user": [
                {
                    "_id": "65131d0ccbb49c9724c15729",
                    "name": "soha",
                    "email": "sohakandil71097@gmail.com",
                    "mobile": "966505694459"
                }
            ]
        }
    ]
}

5) filter orders by date and company [admin]
url = /orders/filter-by-date?page=1&limit=30&company={}&startDate={}&endDate={}
method = GET

default pagination -> page=1, limit=30

response {
    "result": 11,
    "pagination": {
        "currentPage": 5,
        "limit": 30,
        "numberOfPages": 5
    },
    "data": [
        {
            "order": {
                "for": "user",
                "payedFrom": "user-wallet"
            },
            "cancel": {
                "request": false,
                "requestStatus": "pending"
            },
            "_id": "65f2f919efc2b1c044e6a6c2",
            "user": {
                "_id": "65aa75eda40865c366f08fb9",
                "name": "soha",
                "email": "sohakandil71097@gmail.com",
                "mobile": "966505694459"
            },
            "company": "saee",
            "ordernumber": "59/1710422297788gotex",
            "data": {
                "success": true,
                "waybill": "OS06797891KS",
                "epayment_url": "",
                "message": "Pickup Order created successfully",
                "short_code": "CGBz",
                "cash_on_delivery": 0,
                "cash_on_pickup": 0,
                "pickup_date": null
            },
            "paytype": "cc",
            "price": 22,
            "marktercode": "abc",
            "created_at": "2024-03-14T13:18:17.788Z",
            "status": "pending",
            "billCode": "OS06797891KS"
        }
    ]
}

6) get order by id [admin]
5) filter orders by date and company [admin]
url = /orders/filter-by-date?page=1&limit=30&company={}&startDate={}&endDate={}
method = GET

default pagination -> page=1, limit=30

response {
    "result": 11,
    "pagination": {
        "currentPage": 5,
        "limit": 30,
        "numberOfPages": 5
    },
    "data": [
        {
            "order": {
                "for": "user",
                "payedFrom": "user-wallet"
            },
            "cancel": {
                "request": false,
                "requestStatus": "pending"
            },
            "_id": "65f2f919efc2b1c044e6a6c2",
            "user": {
                "_id": "65aa75eda40865c366f08fb9",
                "name": "soha",
                "email": "sohakandil71097@gmail.com",
                "mobile": "966505694459"
            },
            "company": "saee",
            "ordernumber": "59/1710422297788gotex",
            "data": {
                "success": true,
                "waybill": "OS06797891KS",
                "epayment_url": "",
                "message": "Pickup Order created successfully",
                "short_code": "CGBz",
                "cash_on_delivery": 0,
                "cash_on_pickup": 0,
                "pickup_date": null
            },
            "paytype": "cc",
            "price": 22,
            "marktercode": "abc",
            "created_at": "2024-03-14T13:18:17.788Z",
            "status": "pending",
            "billCode": "OS06797891KS"
        }
    ]
}

6) get order by id [admin]
url = /orders/:orderId
method = GET

response {
    "data": {
        "_id": "654956058aa9637c5111e2ba",
        "user": "65131d0ccbb49c9724c15729",
        "company": "imile",
        "ordernumber": "35",
        "data": {
            "code": "200",
            "message": "success",
            "traceId": "33ed5425edbd40e199d75b01ece3496c.519.16993049661804771",
            "data": {
                "expressNo": "6110723394970",
                "imileAwb": ""
            },
            "timeZone": "+4"
        },
        "paytype": "cod",
        "price": 10,
        "marktercode": "",
        "createdate": "2023-11-06T21:09:25.000Z",
        "status": "canceled",
        "createdAt": "2023-11-06T21:09:25.801Z",
        "updatedAt": "2023-11-10T22:10:11.182Z",
        "__v": 0,
        "inovicedaftra": {
            "result": "successful",
            "code": 202,
            "id": "1941",
            "invoice_number": "101916"
        },
        "created_at": "2023-11-06T21:09:25.000Z",
        "billCode": "6110723394970"
    }
}

7) cancel order request [user]
7) cancel order request [user]
url = /orders/cancel-order-request
method = POST

body {
    "orderId": "65f7879ed86cf017f068e705",
    "cancelReason": "test"
}

response {
    "msg": "Your canceling request is saved. Wait until admin accept it."
}

8) change cancel order request status [admin]
8) change cancel order request status [admin]
url = /orders/cancel-order-request-status
method = POST
note: requestStatus is pending by default, can be set to one of these values : pending, accepted or rejected
if it set to accepted the order status changed to canceled and user refunds order money (in his package, wallet, credit or user wallet)

body {
    "orderId": "65f7879ed86cf017f068e705",
    "requestStatus":"accepted"
}

response {
    "msg": "ok"
}

9) get all cancel order requests [admin]
9) get all cancel order requests [admin]
url = /orders/get-cancel-order-requests
method = GET

response {
    "orders": [
        {
            "order": {
                "for": "user",
                "payedFrom": "user-wallet"
            },
            "cancel": {
                "request": true,
                "requestStatus": "accepted"
            },
            "_id": "65d35bf828a9518b56caa7f3",
            "user": "65aa75eda40865c366f08fb9",
            "company": "aramex",
            "ordernumber": 26,
            "data": {
                "Transaction": null,
                "Notifications": [],
                "HasErrors": false,
                "Shipments": [
                    {
                        "ID": "50069865731",
                        "Reference1": "Shipment Reference",
                        "Reference2": null,
                        "Reference3": null,
                        "ForeignHAWB": null,
                        "HasErrors": false,
                        "Notifications": [],
                        "ShipmentLabel": {
                            "LabelURL": "https://ws.aramex.net/ShippingAPI.V2/rpt_cache/7eded32fc088493fb072be2297dddc8a.pdf",
                            "LabelFileContents": []
                        },
                        "ShipmentDetails": {
                            "Origin": "JED",
                            "Destination": "DHA",
                            "ChargeableWeight": {
                                "Unit": "KG",
                                "Value": 3
                            },
                            "DescriptionOfGoods": "test desc",
                            "GoodsOriginCountry": "SA",
                            "NumberOfPieces": 1,
                            "ProductGroup": "DOM",
                            "ProductType": "CDS",
                            "PaymentType": "3",
                            "PaymentOptions": "",
                            "CustomsValueAmount": {
                                "CurrencyCode": "SAR",
                                "Value": 0
                            },
                            "CashOnDeliveryAmount": {
                                "CurrencyCode": "SAR",
                                "Value": 10
                            },
                            "InsuranceAmount": {
                                "CurrencyCode": "SAR",
                                "Value": 0
                            },
                            "CashAdditionalAmount": {
                                "CurrencyCode": "SAR",
                                "Value": 0
                            },
                            "CollectAmount": {
                                "CurrencyCode": "SAR",
                                "Value": 0
                            },
                            "Services": "CODS,",
                            "OriginCity": "Makkah",
                            "DestinationCity": "Dammam"
                        },
                        "ShipmentAttachments": []
                    }
                ]
            },
            "paytype": "cod",
            "price": 10,
            "codPrice": 10,
            "weight": 3,
            "marktercode": "",
            "created_at": "2024-02-19T13:47:36.013Z",
            "status": "canceled",
            "sender": {
                "name": "test2",
                "mobile": "966000000",
                "city": "MAKKA",
                "address": "Test Shipper Address Line1234",
                "province": "389429",
                "cellPhone": "2349859",
                "company": "company abc"
            },
            "receiver": {
                "name": "test1",
                "mobile": "966505694459",
                "city": "DAMMAM",
                "address": "Test Shipper Address Line123",
                "province": "234997",
                "cellPhone": "3842789",
                "company": "company"
            },
            "__v": 0,
            "inovicedaftra": {
                "result": "failed",
                "msg": "daftraid for client is required to create daftra invoice"
            },
            "cancelReason": "test123"
        }
    ]
}


/*********************************saee***************************/
1)edit info (must be admin)
url = https://dashboard.go-tex.net/api/saee/edit
method = post

body 
{
   status => bollean
   userprice => Number 
   marketerprice => Number
   kgprice => Number
   codprice  => Number
   maxcodmarkteer  => Number
   mincodmarkteer  => Number
}
response
{
    "msg": "ok",
}
/******************
2) create order for user
url = https://dashboard.go-tex.net/api/saee/create-user-order
body{
          p_name;
          p_city;
          p_mobile;
          p_streetaddress;
          weight;
          quantity;
          c_name;
          c_city;
          c_streetaddress;
          c_mobile;
          "cod" => if(true){Number = ship value}else{false} 
        "shipmentValue" => if(cod){shipmentValue is require type Number}
}

response {
    user: "",
    data: "",
}
/********************
3) get all user orders
url = https://dashboard.go-tex.net/saee/get-all-orders
method = get
response {
    "data": []
}
/*******************
4) get order stiker
url = https://dashboard.go-tex.net/print-sticker/${order id}
method = get
response{
    msg: "ok",
    data: "html"
}
/******************
5) track order by Number
url = https://dashboard.go-tex.net/api/saee/track-order-by-number
method = post
data={
    "orderId": "6463b592f7f3e6cea14253c0"
}
response{    // just use trackingnum && status
    "data": {
        "success": true,
        "trackingnum": "OS42823840KS",
        "company_id": 3403,
        "failed_delivery_attempts": 0,
        "scheduled_shipment_date": "",
        "reason_code": "",
        "ticket": null,
        "details": [
            {
                "id": 40186288,
                "city": "Makkah",
                "status": 0,
                "notes": "Created By Origin",
                "updated_at": "2023-05-16 16:55:46"
            }
        ]
    }
}
/**************
6) get all cities
url = https://dashboard.go-tex.net/api/saee/get-cities
method = get 
response{

}
/**************
7) cancel order [ user access ]
url = https://dashboard.go-tex.net/api/saee/cancel-order
method = post 
body {
    orderId,
    cancelReason:String
}
response{
    "data": {
        "success": true,
        "message": "This update is done successfully"
    }
}
/*****************************************************glt************************************/
1)edit info (must be admin)
url = https://dashboard.go-tex.net/api/glt/edit
method = post

body 
{
   status => bollean
   userprice => Number 
   marketerprice => Number
   kgprice => Number
   codprice  => Number
   maxcodmarkteer  => Number
   mincodmarkteer  => Number
}
response
{
    "msg": "ok",
}
/**********************************************
2) get all cities
url = https://dashboard.go-tex.net/api/glt/cities
method = get
response 
{
    "data": {
        "status": "success",
        "message": null,
        "httpStatus": "OK",
        "data": [
            {
                "id": 49,
                "name": "Jeddah",
                "code": "JED"
            },
            {
                "id": 50,
                "name": "Dammam",
                "code": "DMM"
            },
            {
                "id": 52,
                "name": "Al Kharj",
                "code": "ALK"
            }
        ]
}
}
/*****************************
2)create order
url = https://dashboard.go-tex.net/api/glt/create-user-order
method = post
body{
    {
    "pieces": 3,
    "description": "desc",
    "clintComment": "c comment",
    "value": 100,
    "weight": 25,
    "s_address": "jadah",
    "s_city": "JED", use city code from no 2
    "s_mobile": 96123987456,
    "s_name": "amer",
    "c_name": "mostafa",
    "c_address": "makah",
    "c_areaName": "makah",
    "c_city": "JED", use city code from no 2
    "c_mobile": 96123987456
    "cod" => if(true){Number = ship value}else{false} 
    "shipmentValue" => if(cod){shipmentValue is require type Number}
}
}

response 
{
    "data": {
        "user": "64453d395f6255b608741b8b",
        "company": "glt",
        "ordernumber": 4,
        "data": {
            "orderNumber": "4gotex",
            "orderTrackingNumber": "GLT0000331895",
            "status": "success",
            "msg": "Order created",
            "order": null,
            "type": "DROP_SHIP"
        },
        "_id": "646a578dcd6e8001870aceaf",
        "__v": 0
    }
}
/******************
3) get all user order
url = https://dashboard.go-tex.net/api/glt/get-all-orders
method = get
response
{
    "data": [
        {
            "_id": "646a5669e1d8184cf046a4e7",
            "user": "64453d395f6255b608741b8b",
            "company": "glt",
            "ordernumber": 1,
            "data": {
                "orderNumber": "1gotex",
                "orderTrackingNumber": "GLT0000331892",
                "status": "success",
                "msg": "Order created",
                "order": null,
                "type": "DROP_SHIP"
            },
            "__v": 0
        },
        {
            "_id": "646a56c4cd6e8001870acea7",
            "user": "64453d395f6255b608741b8b",
            "company": "glt",
            "ordernumber": 2,
            "data": {
                "orderNumber": "2gotex",
                "orderTrackingNumber": "GLT0000331893",
                "status": "success",
                "msg": "Order created",
                "order": null,
                "type": "DROP_SHIP"
            },
            "__v": 0
        }
]
}
/***************************
4) get pdf sticker
url = https://dashboard.go-tex.net/api/print-sticker/${orderid}
method = get

response
{
    "msg": "ok",
    "data": " pdf"
}
/*************************************************aramex*************************************/
1)create user order
url = https://dashboard.go-tex.net/api/aramex/create-user-order
method = post
body{
    "c_name": "amer",
    "c_company": "company name",
    "c_email": "amer@gmail.com",
    "c_phone": "201152306375",
    "c_CellPhone": "652561651",
    "c_PhoneNumber1Ext": "",
    "c_line1": "sadas",
    "c_line2": "sadas",
    "c_city": "الرياض",
    "pieces": 5,
    "p_name": "amer",
    "p_company": "asdczx",
    "p_email": "amer@gmail.com",
    "p_phone": "201152306375",
    "p_PhoneNumber1Ext": "515165165165",
    "p_line1": "gfdsasdvcx",
    "p_city": "الرياض",
    "p_CellPhone": "546545612",
    "p_postCode": "8151",
    "weight": 5,
    "description": ""
}
/*********************
2)edit info (must be admin)
url = https://dashboard.go-tex.net/api/aramex/edit
method = post

body 
{
   status => bollean
   userprice => Number 
   marketerprice => Number
   kgprice => Number
   codprice  => Number
   maxcodmarkteer  => Number
   mincodmarkteer  => Number
}
response
{
    "msg": "ok",
}
/*****************
3) get all user order
url = https://dashboard.go-tex.net/api/aramex/get-all-orders
method = get
response{
    "data": [
        {
            "_id": "647be82dab3f367c29b81927",
            "user": "64453d395f6255b608741b8b",
            "company": "aramex",
            "ordernumber": 2,
            "data": {
                "Transaction": {
                    "Reference1": "",
                    "Reference2": "",
                    "Reference3": "",
                    "Reference4": "",
                    "Reference5": ""
                },
                "Notifications": [],
                "HasErrors": false,
                "Shipments": [
                    {
                        "ID": "32266532583",
                        "Reference1": "",
                        "Reference2": "",
                        "Reference3": "",
                        "ForeignHAWB": "",
                        "HasErrors": false,
                        "Notifications": [],
                        "ShipmentLabel": {
                            "LabelURL": "https://ws.aramex.net/ShippingAPI.V2/rpt_cache/2ffa93b0aecf415fabe3a372f949d985.pdf",
                            "LabelFileContents": []
                        },
                        "ShipmentDetails": {
                            "Origin": "BOM",
                            "Destination": "RUH",
                            "ChargeableWeight": {
                                "Unit": "KG",
                                "Value": 56
                            },
                            "DescriptionOfGoods": "Books",
                            "GoodsOriginCountry": "IN",
                            "NumberOfPieces": 2,
                            "ProductGroup": "EXP",
                            "ProductType": "PPX",
                            "PaymentType": "P",
                            "PaymentOptions": "",
                            "CustomsValueAmount": {
                                "CurrencyCode": "SAR",
                                "Value": 200
                            },
                            "CashOnDeliveryAmount": null,
                            "InsuranceAmount": null,
                            "CashAdditionalAmount": null,
                            "CollectAmount": null,
                            "Services": "",
                            "OriginCity": "Riyadh",
                            "DestinationCity": "Riyadh"
                        },
                        "ShipmentAttachments": []
                    }
                ]
            },
            "__v": 0
        }
    ]
}
/*******************
4) get sticker
url = http://localhost:3000/aramex/print-sticker/{orderId}
method = get
response{
     "data": "https://ws.aramex.net/ShippingAPI.V2/rpt_cache/2ffa93b0aecf415fabe3a372f949d985.pdf"
}
/****************************smsa****************************/
1) create order
url = http://localhost:3000/smsa/create-user-order
method = post
body{
    "c_name": "",
    "c_ContactPhoneNumber": "",
    "c_District": "",
    "c_City": "",
    "c_AddressLine1": "",
    "c_AddressLine2": "",
    "p_name": "",
    "p_ContactPhoneNumber": "",
    "p_District": "",
    "p_City": "",
    "p_AddressLine1": "",
    "p_AddressLine2": "",
    "pieces": 1,
    "weight": 5,
    "description": "test",
    "Value": 10,
    "cod" => if(true){Number = ship value}else{false} 
    "shipmentValue" => if(cod){shipmentValue is require type Number}

}
2)edit info (must be admin)
url = https://dashboard.go-tex.net/api/smsa/edit
method = post

body 
{
   status => bollean
   userprice => Number 
   marketerprice => Number
   kgprice => Number
   codprice  => Number
   maxcodmarkteer  => Number
   mincodmarkteer  => Number
}
response
{
    "msg": "ok",
}
/*****************
3) get all user order
url = https://dashboard.go-tex.net/api/smsa/get-all-orders
method = get
response{
    "data": []
}
/******************
4) get pdf sticker
url = https://dashboard.go-tex.net/api/smsa/print-sticker/${orderid}
method = get

response

{
    "msg": "ok",
    "data": [
        "/smsaAwb/49-p1.pdf",
        "/smsaAwb/49-p2.pdf"
    ]
}
/*********************************anwan*********************************/
1)edit info (must be admin)
url = https://dashboard.go-tex.net/api/anwan/edit
method = post

body 
{
   status => bollean
   userprice => Number 
   marketerprice => Number
   kgprice => Number
   codprice  => Number
   maxcodmarkteer  => Number
   mincodmarkteer  => Number
}
response
{
    "msg": "ok",
}
/****************
2) create order
url = http://localhost:3000/anwan/create-user-order
method = post
body{    //s = sender       c = receiver
    "weight": 10,
    "cod" => if(true){Number = ship value}else{false} 
    "shipmentValue" => if(cod){shipmentValue is require type Number}
    "s_phone": "01152306375",
    "s_name": "عامر مصطفى",
    "s_email": "amermostaafa@gmail.com",
    "c_email": "ashar.k@fastcoo.com",
    "description": "Food Products",
    "s_city": "Riyadh",
    "c_phone": "9876543210",
    "s_address": "Sulayi",
    "c_name": "Ashar Khan",
    "c_city": "Riyadh",
    "pieces": "1",
    "c_address": "As Sawadi Khaldiyah"
}
/*******************
3)get cities for anwan
url = https://dashboard.go-tex.net/api/anwan/cities
method = get
/*******************
4) get sticker
url = https://dashboard.go-tex.net/api/anwan/print-sticker/{id}
method = get
response{
    "data": "https://api.fastcoo-tech.com/API/Print/ANW1060379564"
}
/*******************
5) get all user order
url = https://dashboard.go-tex.net/api/anwan/get-all-orders
method = get
/****************************************invatation************************/
1)create inv
url= https://dashboard.go-tex.net/api/invatation/create-invitation
method = post
body{
    companies: [
        {
            name: String, 
            onlinePayment: number,
            cod: number
        },
    ];
    const clintemail = req.body.clintemail;
}
/*********************
2) invated user signUp
url= https://dashboard.go-tex.net/api/invatation/invited-user-signup
method = post
body{
    "name": "",
    "mobile": "",
    "email": "",
    "password": "",
    "address": "",
    "location": "",
    "cr": files   //optional,
    "invCode": ""   
}
/*******************
3)get-invitations-wait (for admin)
url= https://dashboard.go-tex.net/api/invatation/get-invitations-wait
method = get
/************
4)aproove invatation
url = https://dashboard.go-tex.net/api/invatation/accept-invitation/{id}
method = get
/////****************spl***************///////
1) create order
url = https://dashboard.go-tex.net/api/spl/crete-new-order
method = post
body{
    "cod": 0,
    "SenderName": "gotex test2",
    "SenderMobileNumber": "0565011313",
    "pickUpDistrictID": 5355,
    "pickUpDistrict": "أم الوكور",
    "pickUpGovernorate":"الطائف",
    "pickUpAddress1": "short address",
    "pickUpAddress2": "short address 2",
    "reciverName": "gotex test1",
    "reciverMobile": "0565011313",
    "deliveryDistrictID": 17543,
    "deliveryDistrict": "البردان",
    "deliveryGovernorate": "الشملي",
    "deliveryAddress1": "d short address",
    "deliveryAddress2": "d short address 2",
    "ContentPrice": 28.7,
    "ContentDescription": "books",
    "weight": 10.5,
    "BoxLength": 10,
    "BoxWidth": 12,
    "BoxHeight": 15,
    "Pieces": [
        {
            "PieceWeight": 3,
            "PieceDescription": "book"
        }
    ],
    "daftraid": 30
}
response{
    "msg": "order created successfully",
    "data": {
        "user": "65d472ed151dbd1f7715629e",
        "company": "Spl",
        "ordernumber": "58/1708882518442gotex",
        "data": {
            "Items": [
                {
                    "ReferenceId": "1708882516633 + Gotex",
                    "ItemStatus": 1,
                    "Message": "Success",
                    "Barcode": "CRDSAL0601099324",
                    "ItemPiecesResponse": [
                        {
                            "PieceBarcode": "CRDSAL0601099424",
                            "PieceWeight": 3,
                            "PiecePrice": 0,
                            "PieceDescription": "book"
                        }
                    ]
                }
            ],
            "Status": 1,
            "Message": "Success"
        },
        "sender": {
            "name": "gotex test2",
            "mobile": "0565011313",
            "city": "أم الوكور",
            "governorate": "الطائف",
            "cityId": 5355,
            "AddressLine1": "short address",
            "AddressLine2": "short address 2"
        },
        "paytype": "cc",
        "price": 22,
        "codPrice": 0,
        "weight": 10.5,
        "marktercode": "",
        "created_at": "2024-02-25T17:35:18.442Z",
        "desc": "books",
        "status": "pending",
        "receiver": {
            "name": "gotex test1",
            "mobile": "0565011313",
            "city": "البردان",
            "governorate": "الشملي",
            "cityId": 17543,
            "AddressLine1": "d short address",
            "AddressLine2": "d short address 2"
        },
        "_id": "65db7a56b5b05591dde2d3b0",
        "__v": 0,
        "inovicedaftra": {
            "result": "successful",
            "code": 202,
            "id": "11481",
            "invoice_number": "111451"
        }
    },
    "clientData": {}
}
/************
2)get cities  (use city id in create order)
url = https://dashboard.go-tex.net/api/spl/get-cities  
method  = get 
response {
    "data": {
        "Cities": [
            {
                "Id": "5355",
                "Name": "أم الوكور",
                "GovernorateName": "الطائف"
            },
            {
                "Id": "17543",
                "Name": "البردان",
                "GovernorateName": "الشملي"
            }
        ]
    }
}
/************
3) Get user orders 
url = https://dashboard.go-tex.net/api/spl/get-all-orders
response {
    "data": [
        {
            "_id": "65db3be1151dbd1f771570e5",
            "user": "65d472ed151dbd1f7715629e",
            "company": "Spl",
            "ordernumber": "55/1708866529446gotex",
            "data": {
                "Items": [
                    {
                        "ReferenceId": "1708866526780 + Gotex",
                        "ItemStatus": 1,
                        "Message": "Success",
                        "Barcode": "CRDSAL0601098724",
                        "ItemPiecesResponse": [
                            {
                                "PieceBarcode": "CRDSAL0601098824",
                                "PieceWeight": 3,
                                "PiecePrice": 0,
                                "PieceDescription": "book"
                            }
                        ]
                    }
                ],
                "Status": 1,
                "Message": "Success"
            },
            "sender": {
                "name": "gotex test2",
                "mobile": "0565011313",
                "city": 19929,
                "AddressLine1": "short address",
                "AddressLine2": "short address 2"
            },
            "paytype": "cc",
            "price": 22,
            "codPrice": 0,
            "weight": 10.5,
            "marktercode": "",
            "created_at": "2024-02-25T13:08:49.446Z",
            "desc": "books",
            "status": "pending",
            "receiver": {
                "name": "gotex test1",
                "mobile": "0565011313",
                "city": 11095,
                "AddressLine1": "d short address",
                "AddressLine2": "d short address 2"
            },
            "__v": 0,
            "inovicedaftra": {
                "result": "successful",
                "code": 202,
                "id": "11463",
                "invoice_number": "111433"
            }
        }
    ]
}
/************
4) Get order by id
url = https://dashboard.go-tex.net/api/spl/get-order/:id
response{
    "data": {
        "_id": "65db7a56b5b05591dde2d3b0",
        "user": "65d472ed151dbd1f7715629e",
        "company": "Spl",
        "ordernumber": "58/1708882518442gotex",
        "data": {
            "Items": [
                {
                    "ReferenceId": "1708882516633 + Gotex",
                    "ItemStatus": 1,
                    "Message": "Success",
                    "Barcode": "CRDSAL0601099324",
                    "ItemPiecesResponse": [
                        {
                            "PieceBarcode": "CRDSAL0601099424",
                            "PieceWeight": 3,
                            "PiecePrice": 0,
                            "PieceDescription": "book"
                        }
                    ]
                }
            ],
            "Status": 1,
            "Message": "Success"
        },
        "sender": {
            "name": "gotex test2",
            "mobile": "0565011313",
            "city": "أم الوكور",
            "governorate": "الطائف",
            "cityId": 5355,
            "AddressLine1": "short address",
            "AddressLine2": "short address 2"
        },
        "paytype": "cc",
        "price": 22,
        "codPrice": 0,
        "weight": 10.5,
        "marktercode": "",
        "created_at": "2024-02-25T17:35:18.442Z",
        "desc": "books",
        "status": "pending",
        "receiver": {
            "name": "gotex test1",
            "mobile": "0565011313",
            "city": "البردان",
            "governorate": "الشملي",
            "cityId": 17543,
            "AddressLine1": "d short address",
            "AddressLine2": "d short address 2"
        },
        "__v": 0,
        "inovicedaftra": {
            "result": "successful",
            "code": 202,
            "id": "11481",
            "invoice_number": "111451"
        }
    }
}

/**************
5)edit info (must be admin)
url = https://dashboard.go-tex.net/api/spl/edit
method = post

body 
{
   status => bollean
   userprice => Number 
   marketerprice => Number
   kgprice => Number
   codprice  => Number
   maxcodmarkteer  => Number
   mincodmarkteer  => Number
}
response
{
    "msg": "ok",
}
//******************************** daftra *******************************************************//
**************staff******************
1) get all (only admin)
url = https://dashboard.go-tex.net/api/daftra/staff-get-all
method = get
response
{
    []
}
/*************
2) get By id (only admin)  get id from daftra
url = https://dashboard.go-tex.net/api/daftra/staff-by-id/{id}
method = get
response
{
    []
}
/***********
3)connect-markter-with-daftra (admin only)
url = https://dashboard.go-tex.net/api/daftra/connect-markter-with-daftra
method = POST
body{
    "daftraid": "2",
    "marketerid": "645e83b6ca532b4bcb6f35d4"
}
****************clints************************
1) get all clint (admin)
url = https://dashboard.go-tex.net/api/daftra/clients-get-all
method = get
/******************
2) get clint by id (admin)
url = https://dashboard.go-tex.net/api/client-by-id/{id}
method = get
/*****************
3) get markter clients (marketer)
url = https://dashboard.go-tex.net/api/get-markter-clints
method = get
/****************
4) add new client (marketer)
url = https://dashboard.go-tex.net/api/add-new-client
method = post
body{
    {
    "business_name": "test business_name",
    "first_name": "Amer",
    "last_name": "mostafa",
    "email": "amermostaafa@gmail.com",
    "address": "test address",
    "city": "cairo",
    "state": "test state",
    "phone": "01152306375",
    "notes": "test notes",
    "category": "test notes",
    "birth_date": "14-6-1998"
}
}
/**************
5)edit client (markter)
url = https://dashboard.go-tex.net/api/daftra/edit-client-info
method = post
body{
    "client_id": "23"
    "business_name": "test business_name",
    "first_name": "Amer",
    "last_name": "mostafa",
    "email": "amermostaafa@gmail.com",
    "address": "test address",
    "city": "cairo",
    "state": "test state",
    "phone": "01152306375",
    "notes": "test notes",
    "category": "test notes",
    "birth_date": "14-6-1998"
}
/**************************invoices*************************/
1)get All (admin)
url = https://dashboard.go-tex.net/api/daftra/inovic-get-all
method = get
/******************
2)get marketer inovic
url = https://dashboard.go-tex.net/api/daftra/get-all-markter-invoices
method = get
3)get invoice by id (marketer)
url = https://dashboard.go-tex.net/api/daftra/get-invoice/:invoiceId
method = get
response{
    "data": "https://aljwadalmomez.daftra.com/invoices/preview/127?hash=79c569647e484eaf952805afef10f324"
}
4)get all invoice (admin)
url = https://dashboard.go-tex.net/api/daftra/all-invoices?page={}
method = getc
response{
    "pagination": {
        "prev": null,
        "next": "api2/invoices?page=2",
        "page": 1,
        "page_count": 392,
        "total_results": 7829
    },
    "data": [
        {
            "Invoice": {
                "id": "7857",
                "site_id": "3050101",
                "staff_id": "-3",
                "subscription_id": null,
                "store_id": "1",
                "type": "0",
                "no": "107828",
                "order_number": null,
                "po_number": null,
                "name": null,
                "client_id": "488",
                "address_id": null,
                "is_offline": "1",
                "currency_code": "SAR",
                "client_business_name": "متجر ريتال",
                "client_first_name": "متجر ريتال",
                "client_last_name": "",
                "client_email": "",
                "client_address1": "RIYADH",
                "client_address2": null,
                "client_postal_code": null,
                "client_city": "Riyadh",
                "client_state": "..",
                "client_country_code": "SA",
                "date": "2024-01-11",
                "payment_status": "2",
                "draft": "0",
                "issued": "1",
                "active": "0",
                "tax1": null,
                "tax2": null,
                "discount": "0",
                "deposit": "0",
                "deposit_type": "1",
                "due_after": "0",
                "issue_date": null,
                "date_format": "0",
                "language_id": "7",
                "label_invoice_no": null,
                "label_date": null,
                "label_po_no": null,
                "label_total": null,
                "label_status": null,
                "label_due_after": null,
                "label_due_date": null,
                "label_deposit": null,
                "label_paid_amount": null,
                "label_unpaid_amount": null,
                "label_subtotal": null,
                "label_description": null,
                "label_item": null,
                "label_tax1": null,
                "label_tax2": null,
                "label_quantity": null,
                "label_unit_price": null,
                "label_item_total": null,
                "label_from_date": null,
                "label_to_date": null,
                "summary_tax1": null,
                "summary_subtotal": "0",
                "summary_tax2": null,
                "summary_discount": "0",
                "summary_total": "0",
                "adjustment_label": null,
                "adjustment_value": null,
                "summary_paid": "29",
                "summary_unpaid": "0",
                "summary_deposit": "0",
                "notes": "--------------",
                "html_notes": null,
                "required_terms": null,
                "terms": "",
                "terms_id": null,
                "subscription_unit": null,
                "subscription_period": null,
                "subscription_repeated": null,
                "subscription_max_repeat": null,
                "from": null,
                "to": null,
                "created": "2024-01-11 08:45:23",
                "modified": "2024-01-11 08:45:25",
                "required_terms_file": "0",
                "invoice_layout_id": "1",
                "estimate_id": "0",
                "last_sent": null,
                "subscription_notify": null,
                "show_from_to": null,
                "subscription_issue_before": null,
                "shipping_options": null,
                "client_active_secondary_address": "0",
                "client_secondary_name": "string",
                "client_secondary_address1": "string",
                "client_secondary_address2": "string",
                "client_secondary_city": "string",
                "client_secondary_state": "string",
                "client_secondary_postal_code": "string",
                "client_secondary_country_code": "string",
                "follow_up_status": null,
                "auto_payment": null,
                "discount_amount": "0",
                "shipping_amount": null,
                "shipping_option_id": null,
                "shipping_tax_id": null,
                "work_order_id": null,
                "summary_refund": "0",
                "item_columns": "{\"field1\":{\"name\":\"auto\",\"label\":\"الرقم \"},\"field2\":{\"name\":\"name\",\"label\":\"البيان\"},\"field3\":{\"name\":\"category\",\"label\":\"التصنيف\"},\"field4\":{\"name\":\"\",\"label\":\"\"},\"field5\":{\"name\":\"\",\"label\":\"\"}}",
                "inventory_request_status": null,
                "source_type": null,
                "source_id": null,
                "sales_person_id": "-3",
                "extra_details": "{\"invoice_version\":2}",
                "requisition_delivery_status": null,
                "item_discount_amount": "0",
                "pos_shift_id": null,
                "group_price_id": null,
                "external_source": "api",
                "branch_id": "1",
                "invoice_html_url": "https://aljwadalmomez.daftra.com/invoices/preview/7857?hash=0eef3f053aa7042e15f97360c3d3bc9c",
                "invoice_pdf_url": "https://aljwadalmomez.daftra.com/invoices/view/7857.pdf?hash=0eef3f053aa7042e15f97360c3d3bc9c",
                "due_date": "2024-01-11",
                "qr_code_url": "https://aljwadalmomez.daftra.com/qr/?d64=QVVUWXROaXgyWVBZcVNEWXA5bUUyS3paaU5pbjJLOGcyS2ZaaE5tRjJZWFppdGl5SU5tRTJZVFlydGl2MllYWXA5aXFJTmluMllUWmhObUkyS3pZczlpcTJZcllxUUlQTXpFeE5EYzRPRGd6TlRBd01EQXpBeFF5TURJMExUQXhMVEV4VkRBNE9qUTFPakl6V2dRRU1DNHdNQVVCTUE9PQ==",
                "Client": {
                    "id": "488",
                    "is_offline": "1",
                    "client_number": "1552",
                    "site_id": "3050101",
                    "staff_id": "-3",
                    "business_name": "متجر ريتال",
                    "first_name": "متجر ريتال",
                    "last_name": "",
                    "email": "",
                    "address1": "RIYADH",
                    "address2": null,
                    "city": "Riyadh",
                    "state": "..",
                    "postal_code": null,
                    "phone1": "966501154218",
                    "phone2": null,
                    "country_code": "SA",
                    "notes": "",
                    "active_secondary_address": "0",
                    "secondary_name": null,
                    "secondary_address1": null,
                    "secondary_address2": null,
                    "secondary_city": null,
                    "secondary_state": null,
                    "secondary_postal_code": null,
                    "secondary_country_code": null,
                    "language_code": null,
                    "default_currency_code": "SAR",
                    "last_login": null,
                    "suspend": "0",
                    "last_ip": null,
                    "created": "2023-11-07 18:03:37",
                    "modified": "2023-11-07 18:03:37",
                    "follow_up_status": null,
                    "category": "",
                    "original_site_id": null,
                    "group_price_id": null,
                    "timezone": "0",
                    "bn1": null,
                    "bn1_label": null,
                    "bn2_label": null,
                    "bn2": null,
                    "starting_balance": null,
                    "photo": null,
                    "birth_date": null,
                    "gender": null,
                    "map_location": null,
                    "type": "2",
                    "credit_limit": "0",
                    "credit_period": "0",
                    "national_id": null,
                    "branch_id": "1",
                    "category_id": null,
                    "link": null,
                    "secondary_follow_up_status": null
                }
            }
        }
    ]
}
/**********************credit*****************************/
1) add-credit-to-client (markter)
url = https://dashboard.go-tex.net/user/add-credit-to-client
method = post
body{
    "cartid_limit": 26,
    "clientid": "652a7778388b7b5be8f7dc07"
}
2) change-credit-status
url = https://dashboard.go-tex.net/admin/change-credit-status
method = post
body{
    clientid: "652a7778388b7b5be8f7dc07"
    status: "accepted","declined"
}

/************ Supplier Invoices ************/
1) get all suppliers invoices
url = /api/daftra/get-all-suppliers-invoices
method = GET

2) get supplier invoice by daftraid
url = /api/daftra/get-supplier-invoice/:id
method = GET


//******************************** daftra end *******************************************************//

//********************************imile**********************************//
1)edit info (must be admin)
url = https://dashboard.go-tex.net/api/imile/edit
method = post

body 
   {
    "status": "true",
    "userprice": 20,
    "userCodPrice": 30,
    "marketerprice": 40,
    "mincodmarkteer": 30,
    "maxcodmarkteer": 20,
    "kgprice": 20
}
response
{
    "msg": "ok",
}
//*********
3)add-client 
url = https://dashboard.go-tex.net/api/imile/add-client
method = post
body {
        "companyName": "",
        "contacts": "",
        "city": "",
        "area": "",
        "address": "",
        "phone": "",
        "email": "",
        "backupPhone": "",
        "attentions": ""
}
response
{
    "data": {
        "companyName": "Amer'ssaasddsshdajsadaa",
        "contacts": "AmerMostafa",
        "country": "KSA",
        "city": "TESt-Southern",
        "address": "test address",
        "phone": "9665442342",
        "email": "imile@google.com",
        "backupPhone": "",
        "attentions": "this is consignor address",
        "defaultOption": "0",
        "clintid": "64fa0c68811a6f6e7f463d07",
    }
}
//*****************
4) get-all-client
url = https://dashboard.go-tex.net/api/imile/get-all-clients
method = get
/****************
5)create order
url = https://dashboard.go-tex.net/api/imile/create-user-order
method = post
body{
    {
    "p_company": "p_test name1",
    "c_company": "c_test_name",
    "c_name": "Amer Mostafa Amer",
    "c_mobile": "01152306375",
    "c_city": "macca123",
    "c_area": "areaaaa",
    "c_street": "asdxczcklms",
    "c_address": "c_address",
    "goodsValue": 10,
    "skuName": "name",
    "weight": 10,
    "skuDetailList": [
        {
            "skuName": "Samsung Mobile S21",
            "skuNo": "SAMSUNGM00234",
            "skuDesc": "Samsung Mobile S21",
            "skuQty": 1,
            "skuGoodsValue": "2000",
            "skuUrl": "",
            "skuWeight": "",
            "skuHsCode": ""
        },
        {
            "skuName": "Iphone 13 Pro",
            "skuNo": "IPHONE13PRO234234",
            "skuDesc": "Iphone 13 ProMax",
            "skuQty": 1,
            "skuGoodsValue": "3000",
            "skuUrl": "",
            "skuWeight": "",
            "skuHsCode": ""
        }
    ],
    "markterCode": "4s",
    "description": "books",
    "cod": 10,
    "daftraid": 30
}
}
/********
6)get-all-orders
url = https://dashboard.go-tex.net/api/imile/get-all-orders
method = get
/**************
7) cancel order [ user access ]
url = https://dashboard.go-tex.net/api/imile/cancel-order
method = post 
body {
    orderId,
    cancelReason : String
}
response{
    "data": {
        "code": "200",
        "message": "success",
        "traceId": "3013056fb1cd4fb58fc283c5ad32dfe6.606.16952368031371383",
        "data": null,
        "timeZone": "+4"
    }
}
/**************************jt*************************/
1)create order
url= https://dashboard.go-tex.net/api/jt/create-user-order
method = post
body   // s = sender re = receiver
{
    "cod": 40,
    "weight": "10",
    "markterCode": "3w",
    "description": "description test",
    "re_address": "Riyadh, 20 st",
    "re_city": "Riyadh",
    "re_mobile": "966565011313",
    "re_name": "Amer Mostafa",
    "re_prov": "Riyadh",
    "goodsType": "ITN1", //ITN1  = Clothes ,ITN2 Document, ITN3 = Food ,ITN4 = others ,ITN5 = Digital product ,ITN6 = Daily necessities ,ITN7 = Fragile Items
    "s_address": "test  sender address",
    "s_city": "Meccah",
    "s_mobile": "966565011313",
    "s_name": "Mohamed Mostafa",
    "s_prov": "Abha",
    "goodsValue": "1000",
    "items": [
        {
            "englishName": "iphone",
            "number": 2,
            "itemType": "ITN1",
            "itemName": "",
            "priceCurrency": "SAR",
            "itemValue": "2000",
            "itemUrl": "",
            "desc": "file"
        },
        {
            "englishName": "iphone",
            "number": 2,
            "itemType": "ITN1", //ITN1  = Clothes ,ITN2 Document, ITN3 = Food ,ITN4 = others ,ITN5 = Digital product ,ITN6 = Daily necessities ,ITN7 = Fragile Items
            "itemName": "",
            "priceCurrency": "SAR",
            "itemValue": "2000",
            "itemUrl": "",
            "desc": "file"
        }
    ]
}
/************
2)print sticker
url = https://dashboard.go-tex.net/api/jt/print-sticker/{orderId}
method = get
/*********
3) edit info
url = https://dashboard.go-tex.net/api/jt/edit
method = post
body{
    status;
    userprice;
    userCodPrice;
    marketerprice;
    mincodmarkteer;
    maxcodmarkteer;
    kgprice;
}
4)cancel order
url = https://dashboard.go-tex.net/api/jt/cancel-order
body {
    orderId,
    cancelReason:String
}
response {
    "data": {
        "code": "1",
        "msg": "success",
        "data": {
            "txlogisticId": "1695119354339Gotex",
            "billCode": "UTE010010116584"
        }
    }
}
/**************telr*************/
1)create payment request
url = https://dashboard.go-tex.net/api/user/add-user-balance
method = post
body{
    "amount": 12
}
response{
    {
    "data": {
        "method": "create",
        "trace": "4001/2935250/650bf8d0",
        "order": {
            "ref": "A42CEC7C370A715283740E5CF580C4E619726517484719373EB422A704315B6B",
            "url": "https://secure.telr.com/gateway/process.html?o=A42CEC7C370A715283740E5CF580C4E619726517484719373EB422A704315B6B"
        }
    }
}
}
/********************
2) get all payment order
url = https://dashboard.go-tex.net/api/user/get-all-payment-orders
method = get
response 
{
    "data": [
        {
            "_id": "650bf2fa04605a2c84467946",
            "user": "6497198e8b09d504c416b669",
            "data": {
                "method": "create",
                "trace": "4001/2923219/650bf2fa",
                "order": {
                    "ref": "0C7D3A26C2D68801F3DEA70B1D0F00611C9522FFF7AF4528AD5B038421EB5FF3",
                    "url": "https://secure.telr.com/gateway/process.html?o=0C7D3A26C2D68801F3DEA70B1D0F00611C9522FFF7AF4528AD5B038421EB5FF3"
                }
            },
            "amount": 12,
            "code": "9521655290",
            "status": "authorised",
            "__v": 0
        },
        {
            "_id": "650bf8d1cdbf31f1a6036b3c",
            "user": "6497198e8b09d504c416b669",
            "data": {
                "method": "create",
                "trace": "4001/2935250/650bf8d0",
                "order": {
                    "ref": "A42CEC7C370A715283740E5CF580C4E619726517484719373EB422A704315B6B",
                    "url": "https://secure.telr.com/gateway/process.html?o=A42CEC7C370A715283740E5CF580C4E619726517484719373EB422A704315B6B"
                }
            },
            "amount": 12,
            "code": "1009303479",
            "status": "cancelled",
            "__v": 0
        },
        {
            "_id": "650bfdd73bcbbf7cc0367f92",
            "user": "6497198e8b09d504c416b669",
            "data": {
                "method": "create",
                "trace": "4001/2946056/650bfdd7",
                "order": {
                    "ref": "E9AB8390943E9176534C601655C10B6DC3353ED448BF0E52E1CC4DC48E073709",
                    "url": "https://secure.telr.com/gateway/process.html?o=E9AB8390943E9176534C601655C10B6DC3353ED448BF0E52E1CC4DC48E073709"
                }
            },
            "amount": 12,
            "code": "3699926548",
            "status": "authorised",
            "__v": 0
        }
    ]
}

/************ user charge (tap payment gateway) *************/
1) user charge
url = https://dashboard.go-tex.net/api/user/user-charge
method = post
body{
    "amount": 200
}
response
{
    "data": {
        "id": "chg_TS07A0620232253Zi540712975",
        "object": "charge",
        "live_mode": false,
        "customer_initiated": true,
        "api_version": "V2",
        "method": "CREATE",
        "status": "INITIATED",
        "amount": 200,
        "currency": "SAR",
        "threeDSecure": true,
        "card_threeDSecure": false,
        "save_card": false,
        "product": "GOSELL",
        "statement_descriptor": "Sample",
        "description": "Test Description",
        "metadata": {
            "udf1": "test 1",
            "udf2": "test 2"
        },
        "order": {},
        "transaction": {
            "timezone": "UTC+03:00",
            "created": "1701989586990",
            "url": "https://checkout.beta.tap.company/?mode=page&themeMode=&language=en&token=eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjY1NzIyMmEzN2ExYTUwNWJhNThlMmU3MyJ9.jQIbw8FR2UkVgvtelwL0ConiLXV5suLixGMnWgqNlkw",
            "expiry": {
                "period": 30,
                "type": "MINUTE"
            },
            "asynchronous": false,
            "amount": 200,
            "currency": "SAR"
        },
        "reference": {
            "transaction": "txn_0001",
            "order": "ord_0001"
        },
        "response": {
            "code": "100",
            "message": "Initiated"
        },
        "receipt": {
            "email": true,
            "sms": false
        },
        "customer": {
            "first_name": "soha",
            "email": "sohakandil71097@gmail.com",
            "phone": {
                "country_code": "966",
                "number": ""
            }
        },
        "merchant": {
            "id": "599424"
        },
        "source": {
            "object": "source",
            "id": "src_all",
            "on_file": false
        },
        "redirect": {
            "status": "PENDING",
            "url": "https://dashboard.go-tex.net/api/user/check-tap-payment/INITIATED/65131d0ccbb49c9724c15729/1244774831"
        },
        "post": {
            "status": "PENDING",
            "url": ""
        },
        "activities": [
            {
                "id": "activity_TS03A0720232253Ty2u0712912",
                "object": "activity",
                "created": 1701989586990,
                "status": "INITIATED",
                "currency": "SAR",
                "amount": 200,
                "remarks": "charge - created"
            }
        ],
        "auto_reversed": false
    }
}

2) get user payment orders
url = https://dashboard.go-tex.net/api/user/get-user-payment-orders
method = get
response 
{
    "data": [
        {
            "_id": "65721637fc162602b469e23b",
            "user": "65131d0ccbb49c9724c15729",
            "data": {
                "id": "chg_TS02A0620232200Rb4p0712540",
                "object": "charge",
                "live_mode": false,
                "customer_initiated": true,
                "api_version": "V2",
                "method": "CREATE",
                "status": "INITIATED",
                "amount": 200,
                "currency": "SAR",
                "threeDSecure": true,
                "card_threeDSecure": false,
                "save_card": false,
                "product": "GOSELL",
                "statement_descriptor": "Sample",
                "description": "Test Description",
                "metadata": {
                    "udf1": "test 1",
                    "udf2": "test 2"
                },
                "transaction": {
                    "timezone": "UTC+03:00",
                    "created": "1701986406556",
                    "url": "https://checkout.beta.tap.company/?mode=page&themeMode=&language=en&token=eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjY1NzIxNjM3OGNlNGY3NDhiNGM1MmYyOSJ9.EwLua8viMOXONeKLpxY5b17vmYJo0yvjn8VczbeF0Ag",
                    "expiry": {
                        "period": 30,
                        "type": "MINUTE"
                    },
                    "asynchronous": false,
                    "amount": 200,
                    "currency": "SAR"
                },
                "reference": {
                    "transaction": "txn_0001",
                    "order": "ord_0001"
                },
                "response": {
                    "code": "100",
                    "message": "Initiated"
                },
                "receipt": {
                    "email": true,
                    "sms": false
                },
                "customer": {
                    "first_name": "soha",
                    "email": "sohakandil71097@gmail.com",
                    "phone": {
                        "country_code": "966",
                        "number": ""
                    }
                },
                "merchant": {
                    "id": "599424"
                },
                "source": {
                    "object": "source",
                    "id": "src_all",
                    "on_file": false
                },
                "redirect": {
                    "status": "PENDING",
                    "url": "https://dashboard.go-tex.net/api/user/tap-payment"
                },
                "post": {
                    "status": "PENDING",
                    "url": ""
                },
                "activities": [
                    {
                        "id": "activity_TS04A0820232200Yy4h0712040",
                        "object": "activity",
                        "created": 1701986406556,
                        "status": "INITIATED",
                        "currency": "SAR",
                        "amount": 200,
                        "remarks": "charge - created"
                    }
                ],
                "auto_reversed": false
            },
            "amount": 200,
            "code": "4862663797",
            "status": "INITIATED",
            "__v": 0
        }
    ]
}

//********************************clients new***********************//
1) Add new client
url = https://dashboard.go-tex.net/api/clients/add-new-client
method = post
body{
    "company": "company 123412",
    "first_name": "soha",
    "city": "Najran",
    "state": "abc", // optional
    "address": "Najran",
    "mobile": "9665442343",
    "email": "client@test15.com", // optional
    "notes": "notes", // optional
    "category": "categ2", // optional
    "birth_date": "1-1-2001", // optional
    "street": "123 st",
    "branches": [
                {
                    "city": "Najran",
                    "address": "123 st",
                    "_id": "6547b215ad229e95e763f9ca"
                },
                {
                    "city": "Mecca",
                    "address": "123 st",
                    "_id": "6547b215ad229e95e763f9cb"
                }
    ]
}
/************/
2) edit client by id
url = https://dashboard.go-tex.net/api/clients/edit-client/:id
method = post
body{
{
    "company": "company 123",
    "first_name": "ahmed",
    "city": "Najran",
    "state": "abc", // optional
    "address": "Najran",
    "mobile": "9665442343",
    "email": "client@test12.com", // optional
    "notes": "notes", // optional
    "category": "categ2", // optional
    "birth_date": "1-1-2001", // optional
    "street": "123 st",
    "branches": [
                {
                    "city": "Najran",
                    "address": "123 st",
                    "_id": "6548bb9dd51a1c4cc25af068"
                }
            ]
}
/************/
3) get all clients
url = https://dashboard.go-tex.net/api/clients/get-all-clients
method = get
response {
    "data": [
        {
            "name": "soha ali",
            "company": "company 999",
            "email": "client@test12.com",
            "mobile": "9665442343",
            "city": "Najran",
            "address": "Najran",
            "notes": "notes",
            "street": "123 st",
            "wallet": 0,
            "category": "categ2",
            "addby": "6511e27aa2b4b5d0877d0be8",
            "orders": [],
            "daftraClientId": "84",
            "_id": "6514223a75959e43b0da6167",
            "__v": 0
        }
    ]
}
/************/
4) get all clients with search & pagination (marketer or admin)
url = https://dashboard.go-tex.net/api/clients/all-clients?page=&limit=&name=&mobile=&company=&city=
default page=1, limit=30

method = get
response {
    "result": 29,
    "pagination": {
        "currentPage": 1,
        "limit": 500,
        "numberOfPages": 1
    },
    "data": [
        {
            "package": {
                "companies": []
            },
            "_id": "658b0f875a410eff7095a8ed",
            "name": "Ahmed",
            "company": "company 8888",
            "mobile": "966000000",
            "city": "Jeddah",
            "address": "123 st",
            "street": "124 st",
            "wallet": 0,
            "addby": "65131d0ccbb49c9724c15729",
            "orders": [],
            "daftraClientId": "622",
            "branches": [
                {
                    "city": "Najran",
                    "address": "123 st",
                    "_id": "6548bb9dd51a1c4cc25af068"
                }
            ],
            "receipts": [],
            "__v": 0,
            "updatedAt": "2023-12-26T19:44:41.390Z"
        }
    ]
}
/************/
5) get clients with credit (sorted desc)
url = https://dashboard.go-tex.net/api/clients/clients-with-credit
method = get
response {
    "clients": [
        {
            "credit": {
                "status": "pending",
                "limet": 200,
                "addby": "65131d0ccbb49c9724c15729"
            },
            "package": {
                "companies": []
            },
            "_id": "65132414cbb49c9724c1573d",
            "name": "ahmed ali",
            "company": "company 1234",
            "email": "client@test1.com",
            "mobile": "9665442343",
            "city": "Najran",
            "address": "Najran",
            "notes": "notes",
            "street": "123 st",
            "wallet": 3300,
            "category": "categ2",
            "addby": "6511e27aa2b4b5d0877d0be8",
            "orders": [],
            "__v": 2,
            "branches": [],
            "receipts": [
                "public\\receipts\\recipt-1701881487980لا-أبرح.jpg"
            ],
            "updatedAt": "2023-12-26T19:03:42.551Z"
        }
    ]
}
/************/
6) Register client
url = https://dashboard.go-tex.net/api/clients/register-client/:marketerCode
method = post
body {
    "company": "1234899999 test company",
    "name": "soha",
    "city": "Jeddah",
    "address": "12345 st test",
    "mobile": "966000016",
    "birth_date": "1-1-2001",
    "street": "123 st",
    "branches":[
        {
            "city":"Najran",
            "address":"123 st"
        },
        {
           "city":"Mecca",
            "address":"123 st" 
        }
    ]
}

//***********************new markters ****************/
1) signup
url = https://dashboard.go-tex.net/api/markter/signup
method = post
body{
    "name": "amer mostafa",
    "mobile": "01152306375",
    "email": "amermostaafa@gmail.com",
    "password": "753698@Am",
    "code": "123"
}
//***************
2) login
https://dashboard.go-tex.net/api/markter/login
method = post
body{
    "email": "amermostaafa@gmail.com",
    "password": "753698@Am"
}
//*****************
3) get all *(admin)
url = https://dashboard.go-tex.net/api/markter/get-all-markter
method = get
//*************
4) get-all-clients (for admin)
url = https://dashboard.go-tex.net/api/admin/get-all-clients
method = get
//*************
5) add-client-code (for admin)
url = https://dashboard.go-tex.net/api/admin/add-client-code
method = post
body{
    clientId: "",
    marketerCode: ""
}
//*********************
6) get aramex orders
url = https://dashboard.go-tex.net/api/markter/armex-orders?page=1
method = get
//*********************
7) get jt orders
url = https://dashboard.go-tex.net/api/markter/js-orders?page=1
method = get
//*********************
8) get imile orders
url = https://dashboard.go-tex.net/api/markter/imile-orders?page=1
method = get
//*********************
9) get saee orders
url = https://dashboard.go-tex.net/api/markter/saee-orders?page=1
method = get
//************
10) get smsa orders
url = https://dashboard.go-tex.net/api/markter/smsa-orders?page=1
method = get
//*************
11) get marketer clients
method = get
url = https://dashboard.go-tex.net/api/markter/get-marketer-clients
response{
    "result": 1,
    "data": [
        {
            "package": {
                "companies": []
            },
            "_id": "65e9b25ade8cef8d320dfa20",
            "name": "soha",
            "company": "1234899999 test company",
            "mobile": "966000016",
            "city": "Jeddah",
            "address": "12345 st test",
            "notes": "",
            "street": "123 st",
            "wallet": 0,
            "category": "",
            "addby": "65e9b24cde8cef8d320dfa19",
            "orders": [],
            "daftraClientId": "828",
            "marktercode": "abc",
            "branches": [
                {
                    "city": "Najran",
                    "address": "123 st",
                    "_id": "65e9b25ade8cef8d320dfa21"
                },
                {
                    "city": "Mecca",
                    "address": "123 st",
                    "_id": "65e9b25ade8cef8d320dfa22"
                }
            ],
            "receipts": [],
            "createdAt": "2024-03-07T12:26:02.134Z",
            "updatedAt": "2024-03-07T12:26:02.134Z",
            "__v": 0
        }
    ]
}

/************************************* Package *********************************/
1) add package [admin]
url = https://dashboard.go-tex.net/api/package
method = post

body {
    "price": Number,
    "numberOfOrders": Number,
    "companies":Array of String  // ex: ["saee","smsa", ....] (small chars) NOTE: by default = ['all] means all companies
}

2) edit package [admin]
url = https://dashboard.go-tex.net/api/package/{id}
method = post

body {
    "price": Number,
    "numberOfOrders": Number,
    "companies":Array of String  // ex: ["saee","smsa", ....] (small chars)
}

3) delete package [admin]
url = https://dashboard.go-tex.net/api/package/{id}
method = delete

4) get packages [user or admin]
url = https://dashboard.go-tex.net/api/package
method = get

5) user buy package [user]
url = https://dashboard.go-tex.net/api/package/user-buy-package/{packageId}
method = get

6) user get package info [user] 
url = https://dashboard.go-tex.net/api/package/user-get-package
method = get

7) user cancel package [user] (user can cancel package and refund money only if user does't use the package yet)
url = https://dashboard.go-tex.net/api/package/user-cancel-package
method = get

/* client package apis */
8) buy client package [marketer]
url = https://dashboard.go-tex.net/api/package/buy-client-package/{packageId}
method = post
body{
    clientId: "65132414cbb49c9724c1573d"
}

9) get client package info [marketer]
url = https://dashboard.go-tex.net/api/package/get-client-package/{clientId}
method = get

10) cancel client package [marketer] (marketer can cancel client package and refund money only if user does't use the package yet)
Note: money refund to who paid for it (marketer or client)
url = https://dashboard.go-tex.net/api/package/cancel-client-package/{clientId}
method = get